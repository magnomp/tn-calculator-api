import { HttpModule, HttpService } from '@nestjs/axios';
import { Test } from '@nestjs/testing';
import { RandomStringUsecase } from './random-string-usecase';
import * as sinon from 'sinon';
import { OperationsService } from '../services/operations.service';
import ServerMock from 'mock-http-server';

describe('RandomStringUsecase', () => {
  const operationService = sinon.createStubInstance(OperationsService);
  const server = new ServerMock({ host: 'localhost', port: 9000 });
  let usecase: RandomStringUsecase;

  beforeEach(async () => {
    await new Promise((resolve) => server.start(resolve));
    const moduleRef = await Test.createTestingModule({
      controllers: [],
      providers: [],
      imports: [HttpModule],
    }).compile();

    const httpService = moduleRef.get<HttpService>(HttpService);

    server.on({
      method: 'GET',
      path: '/strings/',
      reply: {
        status: 200,
        headers: { 'content-type': 'text/plain' },
        body: 'random-string',
      },
    });

    usecase = new RandomStringUsecase(
      operationService,
      httpService,
      'http://localhost:9000',
    );
  });

  afterEach(async () => {
    sinon.reset();
    await new Promise((resolve) => server.stop(resolve));
  });

  it('Should return the string generated by random.org', async () => {
    const result = await usecase.execute('user-id');
    expect(result).toBe('random-string');
  });
});
